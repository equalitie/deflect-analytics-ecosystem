version: '3.2'

services:
  postgres:
    build:
      context: ./containers/postgres
      dockerfile: Dockerfile
    env_file:
      - .env
    shm_size: 2g
    environment:
      - TZ=GMT
      - PGTZ=GMT
      - POSTGRES_USER=${BASKERVILLE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${BASKERVILLE_POSTGRES_PASSWORD}
    command: postgres -p ${BASKERVILLE_POSTGRES_PORT} -c log_destination='csvlog' -c logging_collector='on' -c log_filename='postgresql.log' -c log_statement='all' -c synchronous_commit=off

    ports:
      - '5432:5432'
    expose:
      - "${BASKERVILLE_POSTGRES_PORT}"
    volumes:
      - postgres-data4:/var/lib/postgresql/data/

  zookeeper:
    image: bitnami/zookeeper:3.6.3
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOO_TLS_CLIENT_AUTH: "none"
    expose:
      - "2181-2182"

  kafka:
    image: bitnami/kafka:2.8.0
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:SSL
      KAFKA_LISTENERS: PLAINTEXT://:9092,EXTERNAL://:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${DOCKER_KAFKA_HOST}:9092, EXTERNAL://${KAFKA_HOST}:29092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM:
      KAFKA_CFG_ZOOKEEPER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM:
      KAFKA_CFG_ZOOKEEPER_PROTOCOL: PLAINTEXT
      KAFKA_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_CFG_SSL_KEYSTORE_LOCATION: /bitnami/kafka/config/certs/kafka.keystore.jks
#      KAFKA_CFG_SSL_KEYSTORE_PASSWORD: ${KAFKA_KEYSTORE_PASSWORD}
#      KAFKA_CFG_SSL_TRUSTSTORE_LOCATION: /bitnami/kafka/config/certs/kafka.truststore.jks
#      KAFKA_CFG_SSL_TRUSTSTORE_PASSWORD: ${KAFKA_TRUSTSTORE_PASSWORD}

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

    depends_on:
      - zookeeper

  grafana:
    build:
      context: ./containers/grafana
      dockerfile: Dockerfile
      args:
        - BASKERVILLE_DB=baskerville
    env_file:
      - .env
    user: "0"
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    volumes:
      - grafana3:/var/lib/grafana:Z

  baskerville:
    image: "${BASKERVILLE_IMAGE}"
    volumes:
      - ./containers/baskerville/conf:/app/baskerville/conf
      - ./containers/baskerville/models:/app/baskerville/models
      - ./input_logs:/app/baskerville/input_logs
    env_file:
      - .env
    environment:
      - DB_USER=${BASKERVILLE_POSTGRES_USER}
      - DB_PASSWORD=${BASKERVILLE_POSTGRES_PASSWORD}
      - DB_HOST=postgres
      - DB_PORT=${BASKERVILLE_POSTGRES_PORT}
      - KAFKA_HOST=${DOCKER_KAFKA_HOST}:9092
    depends_on:
      - postgres
      - kafka
    command: python3 /usr/local/baskerville/src/baskerville/main.py -c /app/baskerville/conf/baskerville.yaml irawlog
    ports:
      - "8998:8998"
      - "8999:8999"
      - "4040:4040"
      - "4041:4041"
      - "4042:4042"

volumes:
  postgres-data4:
  grafana3:

networks:
  local:
    driver: bridge